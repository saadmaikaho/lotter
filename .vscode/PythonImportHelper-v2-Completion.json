[
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "register_tortoise",
        "importPath": "tortoise.contrib.fastapi",
        "description": "tortoise.contrib.fastapi",
        "isExtraImport": true,
        "detail": "tortoise.contrib.fastapi",
        "documentation": {}
    },
    {
        "label": "pydantic_model_creator",
        "importPath": "tortoise.contrib.pydantic",
        "description": "tortoise.contrib.pydantic",
        "isExtraImport": true,
        "detail": "tortoise.contrib.pydantic",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "LotteryTicket",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "get_random_result",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_random_result():\n    # Simulate getting a random result (prize)\n    prizes = [\"谢谢参与\", \"300\", \"600\", \"900\", \"1500\", \"3000\", \"8800\", \"再来一次\"]\n    return random.choice(prizes)\n# Register Tortoise ORM\nregister_tortoise(\n    app,\n    db_url='sqlite://data/db.sqlite3',\n    modules={'models': ['models']},\n    generate_schemas=True,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n# CORS Configuration\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allow_headers=[\"*\"],\n)\n# Create Pydantic model for LotteryTicket",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "LotteryTicket_Pydantic",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "LotteryTicket_Pydantic = pydantic_model_creator(LotteryTicket, name=\"LotteryTicket\")\nasync def phoneNumberExists(phoneNumber: str):\n    with open('data.csv', newline='') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            if phoneNumber == row[0]:\n                return True\n    return False\n@app.post(\"/savePhoneNumber/\")\nasync def save_phone_number(phone_data: dict):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "LotteryTicket",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class LotteryTicket(models.Model):\n    id = fields.IntField(pk=True)\n    ticket_code = fields.CharField(max_length=50, unique=True)\n    result = fields.CharField(max_length=50, null=True)\n    used = fields.BooleanField(default=False)\n    use_count = fields.IntField(default=0) \nclass AdminUser(models.Model):\n    id = fields.IntField(pk=True)\n    username = fields.CharField(max_length=20, unique=True)\n    password = fields.CharField(max_length=128) ",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AdminUser",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class AdminUser(models.Model):\n    id = fields.IntField(pk=True)\n    username = fields.CharField(max_length=20, unique=True)\n    password = fields.CharField(max_length=128) \n    @classmethod\n    async def create_admin(cls):\n        username = \"saaduu123\"\n        password = \"saaduu@123\"\n        existing_user = await cls.get_or_none(username=username)\n        if existing_user is None:",
        "detail": "models",
        "documentation": {}
    }
]