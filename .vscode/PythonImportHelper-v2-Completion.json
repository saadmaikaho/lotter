[
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Security",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "register_tortoise",
        "importPath": "tortoise.contrib.fastapi",
        "description": "tortoise.contrib.fastapi",
        "isExtraImport": true,
        "detail": "tortoise.contrib.fastapi",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "pydantic_model_creator",
        "importPath": "tortoise.contrib.pydantic",
        "description": "tortoise.contrib.pydantic",
        "isExtraImport": true,
        "detail": "tortoise.contrib.pydantic",
        "documentation": {}
    },
    {
        "label": "Jinja2Templates",
        "importPath": "fastapi.templating",
        "description": "fastapi.templating",
        "isExtraImport": true,
        "detail": "fastapi.templating",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "LotteryTicket",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AdminUser",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "tortoise",
        "description": "tortoise",
        "isExtraImport": true,
        "detail": "tortoise",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class TokenData(BaseModel):\n    username: str | None = None\n# JWT configuration\nSECRET_KEY = \"your_secret_key\"  # Replace with a secure key\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_token(token: str, credentials_exception):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "verify_token",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def verify_token(token: str, credentials_exception):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError as e:\n        raise credentials_exception\n    return token_data",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_random_result",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_random_result():\n    prizes = [\"谢谢参与\", \"300\", \"600\", \"900\", \"1500\", \"3000\", \"8800\", \"再来一次\"]\n    probabilities = [0.10, 0.36, 0.25, 0.10, 0.5, 0.03, 0.01, 0.10]\n    return random.choices(prizes, probabilities)[0]\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "SECRET_KEY = \"your_secret_key\"  # Replace with a secure key\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "ALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict, expires_delta: timedelta | None = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\ntemplates = Jinja2Templates(directory=\"templates\")\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\nregister_tortoise(",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "templates",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "templates = Jinja2Templates(directory=\"templates\")\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\nregister_tortoise(\n    app,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    return verify_token(token, credentials_exception)\nasync def authenticate_user(username: str, password: str):\n    user = await AdminUser.get_or_none(username=username)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "LotteryTicket_Pydantic",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "LotteryTicket_Pydantic = pydantic_model_creator(LotteryTicket, name=\"LotteryTicket\")\n@app.get(\"/tickets/\", response_model=List[LotteryTicket_Pydantic])\nasync def get_tickets():\n    return await LotteryTicket_Pydantic.from_queryset(LotteryTicket.all())\n@app.post(\"/generate_ticket/\")\nasync def generate_ticket():\n    ticket_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))\n    ticket = await LotteryTicket.create(ticket_code=ticket_code)\n    return {\"ticket_code\": ticket.ticket_code}\n@app.post(\"/submit_ticket/{ticket_code}\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "LotteryTicket",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class LotteryTicket(models.Model):\n    id = fields.IntField(pk=True)\n    ticket_code = fields.CharField(max_length=50, unique=True)\n    result = fields.CharField(max_length=50, null=True)\n    used = fields.BooleanField(default=False)\n    use_count = fields.IntField(default=0)  # 新增字段，表示使用次数\nclass AdminUser(models.Model):\n    id = fields.IntField(pk=True)\n    username = fields.CharField(max_length=20, unique=True)\n    password = fields.CharField(max_length=128)  # 直接存储明文密码",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "AdminUser",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class AdminUser(models.Model):\n    id = fields.IntField(pk=True)\n    username = fields.CharField(max_length=20, unique=True)\n    password = fields.CharField(max_length=128)  # 直接存储明文密码\n    @classmethod\n    async def create_admin(cls):\n        username = \"saaduu123\"\n        password = \"saaduu@123\"\n        existing_user = await cls.get_or_none(username=username)\n        if existing_user is None:",
        "detail": "models",
        "documentation": {}
    }
]